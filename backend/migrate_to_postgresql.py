#!/usr/bin/env python
"""
Script de migration de SQLite vers PostgreSQL
Ce script sauvegarde les donn√©es SQLite et les transf√®re vers PostgreSQL
"""

import os
import sys
import django
import json
from pathlib import Path

# Configuration Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mocess_backend.settings')

# Import Django apr√®s configuration
django.setup()

from django.core.management import call_command
from django.db import connections
from django.conf import settings
from api.models import *

def backup_sqlite_data():
    """Sauvegarde toutes les donn√©es SQLite dans un fichier JSON"""
    print("üîç Sauvegarde des donn√©es SQLite...")
    
    # Liste de tous les mod√®les de l'application api
    models = [
        'Category',
        'Project',
        'ProjectImage',
        'News',
        'NewsImage',
        'Publication',
        'Resource',
        'ContactForm',
        'PartnershipForm',
        'NewsletterSubscription',
        'TeamMember',
        'Partner',
        'EventRegistration',
        'ExternalLink',
    ]
    
    backup_data = {}
    
    for model_name in models:
        try:
            model = globals()[model_name]
            objects = model.objects.all()
            backup_data[model_name] = []
            
            for obj in objects:
                # Convertir l'objet en dictionnaire
                obj_data = {}
                for field in obj._meta.fields:
                    value = getattr(obj, field.name)
                    # G√©rer les types sp√©ciaux
                    if hasattr(value, 'isoformat'):  # Pour les dates
                        value = value.isoformat()
                    elif hasattr(value, 'url'):  # Pour les ImageField/FileField
                        value = str(value) if value else None
                    obj_data[field.name] = value
                
                backup_data[model_name].append(obj_data)
            
            print(f"‚úÖ {model_name}: {len(backup_data[model_name])} objets sauvegard√©s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde de {model_name}: {e}")
    
    # Sauvegarder dans un fichier JSON
    backup_file = BASE_DIR / 'sqlite_backup.json'
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump(backup_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ Sauvegarde compl√®te sauvegard√©e dans: {backup_file}")
    return backup_file

def setup_postgresql():
    """Configure la base de donn√©es PostgreSQL"""
    print("üîß Configuration de PostgreSQL...")
    
    # V√©rifier si PostgreSQL est configur√©
    if 'postgresql' not in settings.DATABASES['default']['ENGINE']:
        print("‚ùå PostgreSQL n'est pas configur√© dans settings.py")
        print("Assurez-vous que DB_ENGINE=postgresql dans votre fichier .env")
        return False
    
    # Tester la connexion PostgreSQL
    try:
        with connections['default'].cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ Connexion PostgreSQL r√©ussie: {version[0]}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion PostgreSQL: {e}")
        return False

def migrate_schema():
    """Migre le sch√©ma vers PostgreSQL"""
    print("üèóÔ∏è Migration du sch√©ma vers PostgreSQL...")
    
    try:
        # Supprimer les migrations existantes si n√©cessaire
        call_command('migrate', '--fake-initial')
        
        # Appliquer toutes les migrations
        call_command('migrate')
        print("‚úÖ Sch√©ma migr√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration du sch√©ma: {e}")
        return False

def restore_data_from_backup(backup_file):
    """Restaure les donn√©es depuis la sauvegarde SQLite"""
    print("üì• Restauration des donn√©es depuis la sauvegarde...")
    
    try:
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        for model_name, objects_data in backup_data.items():
            try:
                model = globals()[model_name]
                print(f"üîÑ Restauration de {model_name}...")
                
                for obj_data in objects_data:
                    # Cr√©er l'objet sans l'ID pour √©viter les conflits
                    if 'id' in obj_data:
                        del obj_data['id']
                    
                    # G√©rer les champs sp√©ciaux
                    for field_name, value in obj_data.items():
                        if value and isinstance(value, str):
                            # V√©rifier si c'est un chemin de fichier
                            if field_name in ['image', 'photo', 'file'] and value.startswith('/'):
                                # Copier le fichier vers le nouveau chemin
                                old_path = BASE_DIR / value.lstrip('/')
                                if old_path.exists():
                                    # Cr√©er le nouveau chemin
                                    new_path = settings.MEDIA_ROOT / Path(value).name
                                    new_path.parent.mkdir(parents=True, exist_ok=True)
                                    import shutil
                                    shutil.copy2(old_path, new_path)
                                    obj_data[field_name] = str(new_path.relative_to(settings.MEDIA_ROOT))
                    
                    # Cr√©er l'objet
                    model.objects.create(**obj_data)
                
                print(f"‚úÖ {model_name}: {len(objects_data)} objets restaur√©s")
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la restauration de {model_name}: {e}")
        
        print("‚úÖ Restauration des donn√©es termin√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la restauration: {e}")
        return False

def main():
    """Fonction principale de migration"""
    print("üöÄ D√©but de la migration SQLite vers PostgreSQL")
    print("=" * 50)
    
    # √âtape 1: Sauvegarder les donn√©es SQLite
    backup_file = backup_sqlite_data()
    
    # √âtape 2: Configurer PostgreSQL
    if not setup_postgresql():
        print("‚ùå Impossible de configurer PostgreSQL. Arr√™t de la migration.")
        return
    
    # √âtape 3: Migrer le sch√©ma
    if not migrate_schema():
        print("‚ùå Impossible de migrer le sch√©ma. Arr√™t de la migration.")
        return
    
    # √âtape 4: Restaurer les donn√©es
    if not restore_data_from_backup(backup_file):
        print("‚ùå Impossible de restaurer les donn√©es. Arr√™t de la migration.")
        return
    
    print("=" * 50)
    print("üéâ Migration termin√©e avec succ√®s!")
    print("üìù N'oubliez pas de:")
    print("   1. Tester votre application")
    print("   2. Sauvegarder le fichier sqlite_backup.json")
    print("   3. Mettre √† jour votre fichier .env avec DB_ENGINE=postgresql")

if __name__ == '__main__':
    main()
