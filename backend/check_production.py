#!/usr/bin/env python3
"""
Script de v√©rification de la configuration de production
V√©rifie que tous les param√®tres de s√©curit√© sont correctement configur√©s
"""

import os
import sys
from pathlib import Path

def check_production_ready():
    """V√©rifie si la configuration est pr√™te pour la production"""
    print("üîç V√©rification de la configuration de production...")
    print("=" * 50)
    
    issues = []
    warnings = []
    
    # V√©rification des variables critiques
    critical_vars = [
        'SECRET_KEY',
        'DEBUG',
        'DB_ENGINE',
        'DB_NAME',
        'DB_USER',
        'DB_PASSWORD',
        'DB_HOST',
        'DB_PORT'
    ]
    
    for var in critical_vars:
        value = os.environ.get(var)
        if not value:
            issues.append(f"‚ùå Variable {var} manquante")
        else:
            print(f"‚úÖ {var}: {'*' * len(value) if 'PASSWORD' in var else value}")
    
    # V√©rification de DEBUG
    debug_value = os.environ.get('DEBUG', 'True').lower()
    if debug_value == 'true':
        issues.append("‚ùå DEBUG est activ√© - DANGEREUX pour la production")
    else:
        print("‚úÖ DEBUG d√©sactiv√©")
    
    # V√©rification de la base de donn√©es
    db_engine = os.environ.get('DB_ENGINE', 'sqlite3')
    if db_engine == 'sqlite3':
        warnings.append("‚ö†Ô∏è Utilisation de SQLite - PostgreSQL recommand√© pour la production")
    else:
        print("‚úÖ Base de donn√©es PostgreSQL configur√©e")
    
    # V√©rification des fichiers de configuration
    config_files = [
        'railway.json',
        'Procfile',
        'requirements.txt'
    ]
    
    for file in config_files:
        if Path(file).exists():
            print(f"‚úÖ {file} pr√©sent")
        else:
            issues.append(f"‚ùå {file} manquant")
    
    # V√©rification de la s√©curit√©
    security_vars = [
        'SECURE_SSL_REDIRECT',
        'SECURE_HSTS_SECONDS',
        'SECURE_CONTENT_TYPE_NOSNIFF',
        'SECURE_BROWSER_XSS_FILTER'
    ]
    
    for var in security_vars:
        value = os.environ.get(var)
        if value and value.lower() == 'true':
            print(f"‚úÖ {var} activ√©")
        else:
            warnings.append(f"‚ö†Ô∏è {var} non configur√©")
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 50)
    
    if issues:
        print(f"\n‚ùå PROBL√àMES CRITIQUES ({len(issues)}):")
        for issue in issues:
            print(f"  {issue}")
        print("\nüö® La configuration N'EST PAS pr√™te pour la production !")
        return False
    
    if warnings:
        print(f"\n‚ö†Ô∏è AVERTISSEMENTS ({len(warnings)}):")
        for warning in warnings:
            print(f"  {warning}")
        print("\n‚ö†Ô∏è La configuration peut √™tre am√©lior√©e")
    
    if not issues and not warnings:
        print("\nüéâ Configuration 100% pr√™te pour la production !")
    elif not issues:
        print("\n‚úÖ Configuration pr√™te pour la production avec quelques am√©liorations possibles")
    
    return len(issues) == 0

if __name__ == "__main__":
    try:
        # Charger les variables d'environnement depuis railway.env
        env_file = Path("railway.env")
        if env_file.exists():
            print("üìÅ Chargement des variables depuis railway.env...")
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key.strip()] = value.strip()
            print("‚úÖ Variables d'environnement charg√©es")
        else:
            print("‚ö†Ô∏è Fichier railway.env non trouv√©")
        
        # V√©rifier la configuration
        is_ready = check_production_ready()
        
        if is_ready:
            print("\nüöÄ Pr√™t pour le d√©ploiement sur Railway !")
            sys.exit(0)
        else:
            print("\nüîß Veuillez corriger les probl√®mes avant le d√©ploiement")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        sys.exit(1)
