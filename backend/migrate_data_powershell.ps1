# Script de migration des donn√©es SQLite vers PostgreSQL
Write-Host "üöÄ Migration des donn√©es SQLite vers PostgreSQL" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green
Write-Host ""

# √âtape 1: Sauvegarder les donn√©es SQLite
Write-Host "üìã √âtape 1: Sauvegarde des donn√©es SQLite" -ForegroundColor Yellow
Write-Host "----------------------------------------" -ForegroundColor Yellow

$env:DB_ENGINE = "sqlite3"

try {
    python manage.py dumpdata --exclude auth.permission --exclude contenttypes --indent 2 > sqlite_data_backup.json
    Write-Host "‚úÖ Sauvegarde SQLite r√©ussie" -ForegroundColor Green
    
    # V√©rifier la taille du fichier
    $backupFile = Get-Item "sqlite_data_backup.json" -ErrorAction SilentlyContinue
    if ($backupFile -and $backupFile.Length -gt 0) {
        Write-Host "üìä Taille du fichier de sauvegarde: $($backupFile.Length) bytes" -ForegroundColor Cyan
    } else {
        Write-Host "‚ö†Ô∏è Aucune donn√©e trouv√©e dans SQLite" -ForegroundColor Yellow
        exit 0
    }
} catch {
    Write-Host "‚ùå Erreur lors de la sauvegarde SQLite: $_" -ForegroundColor Red
    exit 1
}

# √âtape 2: Restaurer vers PostgreSQL
Write-Host ""
Write-Host "üìã √âtape 2: Restauration vers PostgreSQL" -ForegroundColor Yellow
Write-Host "----------------------------------------" -ForegroundColor Yellow

$env:DB_ENGINE = "postgresql"
$env:DB_NAME = "mocess_db"
$env:DB_USER = "mocess_user"
$env:DB_PASSWORD = "@Basbedo@123"
$env:DB_HOST = "localhost"
$env:DB_PORT = "5432"

try {
    # Essayer de charger les donn√©es avec gestion d'encodage
    python manage.py loaddata sqlite_data_backup.json
    Write-Host "‚úÖ Restauration PostgreSQL r√©ussie" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la restauration PostgreSQL: $_" -ForegroundColor Red
    
    # Essayer une approche alternative
    Write-Host "üîÑ Tentative avec approche alternative..." -ForegroundColor Yellow
    try {
        # Recr√©er le fichier avec l'encodage correct
        $content = Get-Content "sqlite_data_backup.json" -Raw -Encoding UTF8
        $content | Out-File "sqlite_data_backup_fixed.json" -Encoding UTF8
        
        python manage.py loaddata sqlite_data_backup_fixed.json
        Write-Host "‚úÖ Restauration PostgreSQL r√©ussie (approche alternative)" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå √âchec de l'approche alternative: $_" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "============================================================" -ForegroundColor Green
Write-Host "üéâ MIGRATION DES DONN√âES TERMIN√âE AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "‚úÖ Toutes les donn√©es ont √©t√© migr√©es de SQLite vers PostgreSQL" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "1. Tester l'application: python test_final.py" -ForegroundColor White
Write-Host "2. D√©marrer le serveur: python manage.py runserver" -ForegroundColor White
Write-Host "3. V√©rifier les donn√©es dans l'admin Django" -ForegroundColor White
Write-Host "4. Supprimer db.sqlite3 si tout fonctionne" -ForegroundColor White
