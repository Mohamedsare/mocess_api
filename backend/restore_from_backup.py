#!/usr/bin/env python
"""
Script de restauration des donn√©es depuis la sauvegarde JSON vers SQLite
Utilis√© en cas de rollback de PostgreSQL vers SQLite
"""

import os
import sys
import django
import json
from pathlib import Path

# Configuration Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mocess_backend.settings')

# Import Django apr√®s configuration
django.setup()

from django.core.management import call_command
from django.conf import settings
from api.models import *

def restore_data_from_json(backup_file):
    """Restaure les donn√©es depuis le fichier JSON de sauvegarde"""
    print("üì• Restauration des donn√©es depuis la sauvegarde...")
    
    try:
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        for model_name, objects_data in backup_data.items():
            try:
                model = globals()[model_name]
                print(f"üîÑ Restauration de {model_name}...")
                
                # Supprimer les objets existants
                model.objects.all().delete()
                
                for obj_data in objects_data:
                    # Cr√©er l'objet sans l'ID pour √©viter les conflits
                    if 'id' in obj_data:
                        del obj_data['id']
                    
                    # G√©rer les champs sp√©ciaux
                    for field_name, value in obj_data.items():
                        if value and isinstance(value, str):
                            # V√©rifier si c'est un chemin de fichier
                            if field_name in ['image', 'photo', 'file'] and value.startswith('/'):
                                # Copier le fichier vers le nouveau chemin
                                old_path = BASE_DIR / value.lstrip('/')
                                if old_path.exists():
                                    # Cr√©er le nouveau chemin
                                    new_path = settings.MEDIA_ROOT / Path(value).name
                                    new_path.parent.mkdir(parents=True, exist_ok=True)
                                    import shutil
                                    shutil.copy2(old_path, new_path)
                                    obj_data[field_name] = str(new_path.relative_to(settings.MEDIA_ROOT))
                    
                    # Cr√©er l'objet
                    model.objects.create(**obj_data)
                
                print(f"‚úÖ {model_name}: {len(objects_data)} objets restaur√©s")
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la restauration de {model_name}: {e}")
        
        print("‚úÖ Restauration des donn√©es termin√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la restauration: {e}")
        return False

def main():
    """Fonction principale de restauration"""
    print("üîÑ D√©but de la restauration depuis la sauvegarde")
    print("=" * 50)
    
    # Chercher le fichier de sauvegarde
    backup_file = BASE_DIR / 'sqlite_backup.json'
    
    if not backup_file.exists():
        print(f"‚ùå Fichier de sauvegarde non trouv√©: {backup_file}")
        print("Assurez-vous d'avoir ex√©cut√© le script de migration d'abord.")
        return
    
    # V√©rifier que nous sommes en mode SQLite
    if 'sqlite3' not in settings.DATABASES['default']['ENGINE']:
        print("‚ùå La base de donn√©es n'est pas configur√©e pour SQLite")
        print("Modifiez votre fichier .env pour utiliser DB_ENGINE=sqlite3")
        return
    
    # Restaurer les donn√©es
    if restore_data_from_json(backup_file):
        print("=" * 50)
        print("üéâ Restauration termin√©e avec succ√®s!")
        print("üìù V√©rifiez que toutes les donn√©es sont correctement restaur√©es")
    else:
        print("‚ùå √âchec de la restauration")

if __name__ == '__main__':
    main()
